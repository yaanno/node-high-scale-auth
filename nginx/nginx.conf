# Define upstream servers using the service names from docker-compose.yml
upstream auth_service_upstream {
    # auth-service is the DNS name for the container
    server auth-service:8080; 
}

upstream api_service_upstream {
    # api-service is the DNS name for the container
    server api-service:3000;
}

server {
    listen 80;
    server_name localhost;

    # =======================================================
    # 1. PUBLIC ENDPOINTS (No Auth Required)
    # =======================================================
    # Handle /login request: route directly to the Auth service
    location /login {
        proxy_pass http://auth_service_upstream/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # =======================================================
    # 2. PROTECTED ENDPOINTS (Auth Required)
    # =======================================================
    # Any request starting with /api/v1/ is protected
    location /api/v1/ {
        # --- STEP 1: Intercept and send a sub-request for authorization ---
        # The Auth service will validate the JWT here.
        auth_request /_auth_validation;

        # --- STEP 2: Capture the trusted User ID header ---
        # The Auth service responds to /_auth_validation with X-User-ID header.
        # Nginx captures this header from the sub-request's response and 
        # stores it in the $user_id variable.
        auth_request_set $user_id $upstream_http_x_user_id;

        # --- STEP 3: Inject the trusted header into the final request ---
        # The node-api service trusts this header implicitly.
        proxy_set_header X-User-ID $user_id;
        
        # --- STEP 4: Forward the original request to the API service ---
        proxy_pass http://api_service_upstream;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # =======================================================
    # 3. INTERNAL VALIDATION LOCATION (Cannot be accessed externally)
    # =======================================================
    location = /_auth_validation {
        # 'internal' prevents external access to this location
        internal; 

        # We need the Authorization header from the original request
        proxy_set_header Authorization $http_authorization;

        # Do not send the request body to the validation endpoint
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # Pass the sub-request to the internal validation endpoint of the Auth service
        proxy_pass http://auth_service_upstream/validate; 
    }
}
